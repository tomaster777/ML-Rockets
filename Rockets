import pygame
import sys
import random
import math
screen_size=[600,600]
pygame.init()
black=(100,100,100)
clock = pygame.time.Clock()
pygame.font.init()
class Rocket():
        def __init__(self,ARGUMENT):
            if ARGUMENT==None:
                self.dna=dna(None)
            else :
                self.dna=ARGUMENT
            self.screen=pygame.display.set_mode((screen_size[0],screen_size[1]))
            self.white=(255,255,255)
            self.black=(0,0,0)
            self.height=30
            self.width=10
            self.fitness=1
            self.acc_x=0
            self.vel_x=0
            self.vel_y=0
            self.acc_y=0
            self.x_rect=300
            self.y_rect=570
            self.x_circle=290
            self.y_circle=130
            self.width_circle=20
            self.height_circle=20
            self.count=0
            self.failed=False
            self.successed=False
            self.rect=pygame.draw.rect(self.screen, (self.black),[self.x_rect, self.y_rect, self.width, self.height])
            self.obstacle=pygame.draw.rect(self.screen, self.black, [(290,130), (20,20)])
            self.collide_bool=False
            self.collide_edges_bool=False



           
        def show(self):
            self.rect=pygame.draw.rect(self.screen, (self.black),[self.x_rect, self.y_rect, self.width, self.height])
            self.obstacle=pygame.draw.rect(self.screen, self.black, [(self.x_circle,self.y_circle), (self.width_circle,self.height_circle)])
            myfont = pygame.font.SysFont('Comic Sans MS', 30)
            self.textsurface = myfont.render(str(self.count), False, (0, 0, 0))
            self.screen.blit(self.textsurface,(0,0))


        def update_counter(self):
            if self.count==50 :
                self.count=0
                main()
            self.count+=1
            myfont = pygame.font.SysFont('Comic Sans MS', 30)
            self.textsurface = myfont.render(str(self.count), False, (0, 0, 0))
            self.screen.blit(self.textsurface,(0,0))







        def collide(self):
            if (self.obstacle.colliderect(self.rect)):
                self.collide_bool=True
                
        def CalcFitness(self):
            self.distance()
            self.collide_edges()
            self.collide()
            if self.collide_bool==True:
                self.fitness=self.fitness*10
                self.collide_bool=False
            if self.collide_edges_bool==True:
                self.fitness/=10
                self.collide_edges_bool=False

        
        def collide_edges(self):
            if self.x_rect>600 or self.x_rect<0 or self.y_rect>600 or self.y_rect<0 :
                self.collide_edges_bool=True

        def distance(self):
            self.dist=None
            self.dist = math.sqrt((self.x_rect-self.x_circle)**2 + (self.y_rect-self.y_circle)**2)
            #print (self.dist)
            return 1/self.dist    #''' in this moment the distance function doesnt work'''
            
        def update(self):
            self.CalcFitness()
            #print(self.fitness)
            self.update_counter()
            self.acc_x+=self.dna.genes[self.count-1][0]
            self.vel_x+=self.acc_x
            self.x_rect+=self.vel_x
            self.acc_y-=self.dna.genes[self.count-1][1]
            self.vel_y-=self.acc_y
            self.y_rect+=self.vel_y



class pop():
        def __init__(self):
                self.pop_size=50
                self.all_rockets=[]
                self.mating_pool=[]
                
        def compare(self):
            maxfit=0
            for i in self.all_rockets:
                i.CalcFitness()
                if i.fitness > maxfit :
                    maxfit=i.fitness
                    
            for i in range(self.pop_size):
                self.all_rockets[i].fitness /=maxfit


            for j in range(self.pop_size):
                long=int(self.all_rockets[j].fitness*50)
                for i in range(long):
                    self.mating_pool.append(self.all_rockets[i])

        def create_pops(self):
                for i in range(self.pop_size):
                        self.all_rockets.append(Rocket(None))

        def update(self):
                Rocket(None).screen.fill((255,255,255))
                for rocket in self.all_rockets:
                        rocket.update()
                        rocket.show()

                pygame.display.flip()
                clock.tick(10)

        def select_random(self):
            newrockets=[]
            for i in range(len(self.all_rockets)):

                ParentA = self.mating_pool[random.randint(0,len(self.mating_pool))].dna
                ParentB = self.mating_pool[random.randint(0,len(self.mating_pool))].dna
                child = ParentA.crossover(ParentB)
                newrockets.append(Rocket(child))
            self.all_rockets=newrockets
                ## need child.mutation
              

class dna():
    def __init__(self,newgenes):
        if newgenes==None:
            self.genes=[]
            self.lifespan=200
            for i in range(self.lifespan):
                self.genes.append([random.randint(-1,1),random.randint(-1,1)])
        else :
            self.genes=newgenes   

        ###self.genes=[] ##### check it , there might be some mistake here !! ! ! ! ! ! ! ! ! ! 
        #if self.genes:
        #    pass
        #else:
        #    self.genes=[]
        #    self.lifespan=200
        #    for i in range(self.lifespan):
        #        self.genes.append([random.randint(-1,1),random.randint(-1,1)])    
           ##     '''create list of genes  with two dimensions,1 - for x pos, 2 - for y pos '''
                
    def crossover(self,Partner):
        newgenes=[]
        middlepoint= len(self.genes)/2
        for i in range(len(self.genes)):
            if i >middlepoint:
                newgenes.append(self.genes[i])
            else:
                newgenes.append(Partner.genes[i])
        return dna(newgenes)      ##### check it , there might be some mistake here !! ! ! ! ! ! ! ! ! ! 


def main():   
    if __name__ == '__main__':
        while True:
            DNA=dna(None)
            rocket=Rocket(None)
            Pop=pop()
            Pop.create_pops() ## need to create pops only one time !! ! !! !!! !!!!!
            Pop.compare()
            Pop.select_random()
            while Rocket(None).count<50  :
                Pop.update()


                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        sys.exit()

main()
